﻿<#@ template language="C#" #>
<#@ template hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
// MIT License - Copyright (c) Callum McGing
// This file is subject to the terms and conditions defined in
// LICENSE, which is part of this source code package

using System;
using System.Security;
using System.Runtime.InteropServices;
namespace LibreLancer {
	static partial class SSEMath {
	#pragma warning disable 414
<#
	Init();
	foreach(var ln in File.ReadAllLines(Host.ResolvePath("sources.txt"))) {
		var line = ln.Trim();
		if(line == "")
			continue;
		if(line.StartsWith("asm")) {
			var split = line.Split('|');
			Write(ProcessAssembler(split[1].Trim(), split[2].Trim(), split[3].Trim(), split[4].Trim()));
		} else {
			Write(ProcessFile(line));
		}
	}
#>
	#pragma warning restore 414
	}
}

<#+
enum OS {
	Windows,
	Mac,
	Linux
}
OS RunningOS;
string gcc_path;
string objdump_path;
string working_dir;
void Init()
{
	switch (Environment.OSVersion.Platform) {
		case PlatformID.Unix:
			if (Directory.Exists ("/Applications")
				& Directory.Exists ("/System")
				& Directory.Exists ("/Users")
				& Directory.Exists ("/Volumes")) {
					RunningOS = OS.Mac;
					gcc_path="clang";
					objdump_path="/usr/local/bin/gobjdump";
				} else {
					RunningOS = OS.Linux;
					gcc_path = "gcc";
					objdump_path = "objdump";
				}
				break;
		case PlatformID.MacOSX:
			RunningOS = OS.Mac;
			gcc_path="clang";
			objdump_path = "/usr/local/bin/gobjdump";
			break;
		default:
			RunningOS = OS.Windows;
			FindWindowsCompiler();
			break;
	}
}

void FindWindowsCompiler()
{
	throw new Exception("Cannot compile on windows currently");
}

string Q(string str)
{
	return "'"+ str + "'";
}
string DQ(string str)
{
	return '"' + str + '"';
}

string RunProcess(string path, string workingdirectory, params string[] arguments)
{
	Process p = new Process();
	p.StartInfo.UseShellExecute = false;
	p.StartInfo.RedirectStandardOutput = true;
	p.StartInfo.RedirectStandardError = true;
	p.StartInfo.WorkingDirectory = workingdirectory ?? Environment.CurrentDirectory;
	p.StartInfo.FileName = path;
	string args = "";
	foreach(var str in arguments)
	{
		args += str + " ";
	}
	Console.WriteLine(args);
	p.StartInfo.Arguments = args;
	p.Start();
	string output = p.StandardOutput.ReadToEnd();
	string error = p.StandardError.ReadToEnd();
	p.WaitForExit();
	if(p.ExitCode != 0) {
		throw new Exception(path + " returned exit code " + p.ExitCode + "\n" + error);
	}
	return output;
}

string getbytes_mac(string file, string clangargs)
{
	string tmp = Path.GetTempFileName();
	RunProcess("clang", null, "-O3 -msse3",clangargs,"-c", DQ(file), "-o", DQ(tmp));
	//Decompile lol
	var ex = RunProcess("otool",null,"-t", DQ(tmp));
	var builder = new StringBuilder();
	foreach(var ln in ex.Split('\n')) {
		var line = ln.Trim();
		if(line == "")
			continue;
		int idx = line.IndexOf(':');
		if(idx != -1)
			continue;
		idx = line.IndexOf("section");
		if(idx != -1)
			continue;
		
		var split = line.Replace('\t',' ').Split(' ');
		for(int i = 1; i < split.Length;i++) {
			if(split[i].Trim() == "")
				continue;
			builder.Append("0x").Append(split[i]).Append(',');
		}
	}
	File.Delete(tmp);
	return builder.ToString();
}

string getbytes_gcc(string file, string gccargs)
{
	string tmp = Path.GetTempFileName();
	RunProcess(gcc_path, working_dir, "-O3 -msse3", gccargs, "-c", DQ(file), "-o", DQ(tmp));
	var ex = RunProcess(objdump_path, working_dir, "-d", DQ(tmp));
	var builder = new StringBuilder();
	foreach(var ln in ex.Split('\n')) {
		var line = ln.Trim();
		if(line == "")
			continue;
		var split = ln.Split('\t');
		if(split.Length == 1)
			continue;
		var split2 = split[1].Split(' ');
		foreach(var val in split2) {
			var v = val.Trim();
			if(v == "") continue;
			builder.Append("0x").Append(v).Append(',');
		}
	}
	File.Delete(tmp);
	return builder.ToString();
}

string ProcessAssembler(string signature, string file1, string file2, string file3)
{
	string[] split = signature.Split(' ');
	string ret_type = split[0];
	string name = split[1].Substring(0, split[1].IndexOf('('));
	string parameters = signature.Substring(signature.IndexOf('('));
	string codeNameUnix = "__"+ name + "__unix";
	string codeNameWindows = "__" + name + "__windows";
	string codeNameCdecl = "__" + name + "__cdecl";
	var builder = new StringBuilder();
	builder.AppendLine("\t\t[SuppressUnmanagedCodeSecurity]");
	builder.AppendLine("\t\t[UnmanagedFunctionPointer(CallingConvention.Cdecl)]");
	builder.AppendLine("\t\tpublic delegate " + ret_type + " " + name + "Delegate" + parameters + ";");
	builder.AppendLine(string.Format("\t\t[AsmMethod(\"{0}\",\"{1}\",\"{2}\")]", codeNameUnix, codeNameWindows, codeNameCdecl));
	builder.AppendLine("\t\tpublic static " + name + "Delegate " + name + ";");
	if(RunningOS == OS.Mac) {
		builder.AppendLine("\t\tstatic byte[] " + codeNameUnix + " = new byte[] {");
		builder.AppendLine("\t\t" + getbytes_mac(Host.ResolvePath(file1), ""));
		builder.AppendLine("\t\t};");
		builder.AppendLine("\t\tstatic byte[] " + codeNameWindows + " = new byte[] {");
		builder.AppendLine("\t\t" + getbytes_mac(Host.ResolvePath(file2), "-DMSABI"));
		builder.AppendLine("\t\t};");
		builder.AppendLine("\t\tstatic byte[] " + codeNameCdecl + " = new byte[] {");
		builder.AppendLine("\t\t" + getbytes_mac(Host.ResolvePath(file3),"-m32"));
		builder.AppendLine("\t\t};");
	}
	if(RunningOS == OS.Linux | RunningOS == OS.Windows) {
		builder.AppendLine("\t\tstatic byte[] " + codeNameUnix + " = new byte[] {");
		builder.AppendLine("\t\t" + getbytes_gcc(Host.ResolvePath(file1), ""));
		builder.AppendLine("\t\t};");
		builder.AppendLine("\t\tstatic byte[] " + codeNameWindows + " = new byte[] {");
		builder.AppendLine("\t\t" + getbytes_gcc(Host.ResolvePath(file2), ""));
		builder.AppendLine("\t\t};");
		builder.AppendLine("\t\tstatic byte[] " + codeNameCdecl + " = new byte[] {");
		builder.AppendLine("\t\t" + getbytes_gcc(Host.ResolvePath(file3),"-m32"));
		builder.AppendLine("\t\t};");
	}
	return builder.ToString();
}
string ProcessFile(string file)
{
	file = Host.ResolvePath(file);

	var lines = File.ReadAllLines(file);
	string desc = lines[0].Trim().TrimStart('/').Trim();
	string[] split = desc.Split(' ');
	string ret_type = split[0];
	string name = split[1].Substring(0, split[1].IndexOf('('));
	string parameters = desc.Substring(desc.IndexOf('('));
	string codeNameUnix = "__"+ name + "__unix";
	string codeNameWindows = "__" + name + "__windows";
	string codeNameCdecl = "__" + name + "__cdecl";
	var builder = new StringBuilder();
	builder.AppendLine("\t\t[SuppressUnmanagedCodeSecurity]");
	builder.AppendLine("\t\t[UnmanagedFunctionPointer(CallingConvention.Cdecl)]");
	builder.AppendLine("\t\tpublic delegate " + ret_type + " " + name + "Delegate" + parameters + ";");
	builder.AppendLine(string.Format("\t\t[AsmMethod(\"{0}\",\"{1}\",\"{2}\")]", codeNameUnix, codeNameWindows, codeNameCdecl));
	builder.AppendLine("\t\tpublic static " + name + "Delegate " + name + ";");
	if(RunningOS == OS.Mac) {
		builder.AppendLine("\t\tstatic byte[] " + codeNameUnix + " = new byte[] {");
		builder.AppendLine("\t\t" + getbytes_mac(file, ""));
		builder.AppendLine("\t\t};");
		builder.AppendLine("\t\tstatic byte[] " + codeNameWindows + " = new byte[] {");
		builder.AppendLine("\t\t" + getbytes_mac(file, "-DMSABI"));
		builder.AppendLine("\t\t};");
		builder.AppendLine("\t\tstatic byte[] " + codeNameCdecl + " = new byte[] {");
		builder.AppendLine("\t\t" + getbytes_mac(file,"-m32 -DCDECL -mstackrealign"));
		builder.AppendLine("\t\t};");
	}
	if(RunningOS == OS.Linux || RunningOS == OS.Windows) {
		builder.AppendLine("\t\tstatic byte[] " + codeNameUnix + " = new byte[] {");
		builder.AppendLine("\t\t" + getbytes_gcc(file, "-DSYSVABI"));
		builder.AppendLine("\t\t};");
		builder.AppendLine("\t\tstatic byte[] " + codeNameWindows + " = new byte[] {");
		builder.AppendLine("\t\t" + getbytes_gcc(file, "-DMSABI"));
		builder.AppendLine("\t\t};");
		builder.AppendLine("\t\tstatic byte[] " + codeNameCdecl + " = new byte[] {");
		builder.AppendLine("\t\t" + getbytes_gcc(file,"-m32 -DCDECL -mstackrealign"));
		builder.AppendLine("\t\t};");
	}
	return builder.ToString();
}
#>
